name: Apache Config
description: This is Apache Config testing document.
schemaVersion: 1.0
phases:
  - 
    name: build
    steps:
      -
        name: InstallLinuxUpdate
        action: UpdateOS
      -
        name: InstallUtil
        action: ExecuteBash
        inputs:
          commands:
            - dnf install -y rsyslog && sudo systemctl enable rsyslog
            - dnf install -y cronie && sudo systemctl enable cronie
            - dnf install -y postfix && sudo systemctl enable postfix
      -
        name: TimeZoneSet
        action: ExecuteBash
        inputs:
          commands:
            - sudo timedatectl set-timezone Asia/Tokyo
      -
        name: SwapSet
        action: ExecuteBash
        inputs:
          commands:
            - sudo dd if=/dev/zero of=/swapfile1 bs=1M count=512
            - sudo chmod 600 /swapfile1
            - sudo mkswap /swapfile1
            - sudo swapon /swapfile1
            - sudo echo "/swapfile1 swap swap defaults 0 0" >> /etc/fstab
      -
        name: SESRelaySetting
        action: ExecuteBash
        inputs:
          commands:
            - |-
              # 以下の形式で SES の認証情報を Secrets Manager に保存している
              # aws secretsmanager create-secret --name SESCredentials \
              #   --description "SES Credentials for postfix relay" \
              #   --secret-string '{"SESEndpoint": "email-smtp.ap-northeast-1.amazonaws.com", "SESAccessKey": "xxxx", "SESSecretKey": "xxxx"}' \
              #   --region ap-northeast-1
              # ✅ Secrets Manager に `SESCredentials` が存在するか確認
              if aws secretsmanager describe-secret --secret-id ${SESCredentials} --region ${Region} > /dev/null 2>&1; then
                echo "✅ SESCredentials が存在するため、設定を適用します。"
                # ✅ Secrets Manager から SES の認証情報を取得
                SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id ${SESCredentials} --query SecretString --output text --region ${Region})
                # ✅ JSON から値を抽出
                SESEndpoint=$(echo $SECRET_JSON | jq -r '.SESEndpoint')
                SESAccessKey=$(echo $SECRET_JSON | jq -r '.SESAccessKey')
                SESSecretKey=$(echo $SECRET_JSON | jq -r '.SESSecretKey')
                # ✅ Postfix の設定に適用
                sudo postconf -e "relayhost = [${SESEndpoint}]:587"
                sudo postconf -e "smtp_sasl_auth_enable = yes"
                sudo postconf -e "smtp_sasl_security_options = noanonymous"
                sudo postconf -e "smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd"
                sudo postconf -e "smtp_use_tls = yes"
                sudo postconf -e "smtp_tls_security_level = encrypt"
                sudo postconf -e "smtp_tls_note_starttls_offer = yes"
                # ✅ 認証情報の保存
                echo "[${SESEndpoint}]:587 ${SESAccessKey}:${SESSecretKey}" | sudo tee /etc/postfix/sasl_passwd > /dev/null
                sudo postmap hash:/etc/postfix/sasl_passwd
                sudo chmod 0600 /etc/postfix/sasl_passwd.db
                sudo rm -f /etc/postfix/sasl_passwd
                # ✅ 証明書の設定と Postfix の再起動
                sudo postconf -e 'smtp_tls_CAfile = /etc/ssl/certs/ca-bundle.crt'
                sudo systemctl restart postfix
              else
                echo "⚠️ ${SESCredentials} が見つかりません。スキップします。"
              fi
      -
        name: InstallApache
        action: ExecuteBash
        inputs:
          commands:
            - sudo yum -y install httpd
            - sudo systemctl enable httpd
      -
        name: InstallPHP
        action: ExecuteBash
        inputs:
          commands:
            - sudo dnf install -y php
            - sudo dnf install -y php-devel
            - sudo dnf install -y php-fpm
            - sudo dnf install -y php-mysqlnd
            - sudo dnf install -y php-json
            - sudo dnf install -y php-pdo
            - sudo dnf install -y php-mbstring
            - sudo dnf install -y php-pdo
            - sudo dnf install -y php-gd
            - sudo dnf install -y php-bcmath
            - sudo dnf install -y php-dba
            - sudo dnf install -y php-dbg
            - sudo dnf install -y php-embedded
            - sudo dnf install -y php-enchant
            - sudo dnf install -y php-gmp
            - sudo dnf install -y php-intl
            - sudo dnf install -y php-ldap
            - sudo dnf install -y php-odbc
            - sudo dnf install -y php-opcache
            - sudo dnf install -y php-process
            - sudo dnf install -y php-soap
            - sudo dnf install -y php-xml
      -
        name: WriteHttpdConfig
        action: ExecuteBash
        inputs:
          commands:
            - |
              sudo cat > /etc/httpd/conf/httpd.conf << 'EOF'
              ServerRoot "/etc/httpd"
              Listen 80
              Include conf.modules.d/*.conf
              User apache
              Group apache
              ServerAdmin root@localhost
              <Directory />
                  AllowOverride none
                  Require all denied
              </Directory>
              DocumentRoot "/var/www/html"
              <Directory "/var/www">
                  AllowOverride None
                  Require all granted
              </Directory>
              <Directory "/var/www/html">
                  Options Indexes FollowSymLinks
                  AllowOverride None
                  Require all granted
              </Directory>
              <IfModule dir_module>
                  DirectoryIndex index.html
              </IfModule>
              <Files ".ht*">
                  Require all denied
              </Files>
              ErrorLog "logs/error_log"
              LogLevel warn
              <IfModule log_config_module>
                  LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
                  LogFormat "%h %l %u %t \"%r\" %>s %b" common
                  <IfModule logio_module>
                    LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\" %I %O" combinedio
                  </IfModule>
                  CustomLog "logs/access_log" combined
              </IfModule>
              <IfModule mime_module>
                  TypesConfig /etc/mime.types
                  AddType application/x-compress .Z
                  AddType application/x-gzip .gz .tgz
              </IfModule>
              <IfModule mime_magic_module>
                  MIMEMagicFile conf/magic
              </IfModule>
              EnableSendfile on
              <IfModule mod_http2.c>
                  Protocols h2 h2c http/1.1
              </IfModule>
              IncludeOptional conf.d/*.conf
              EOF
      -
        name: WriteMpmConfig
        action: ExecuteBash
        inputs:
          commands:
            - |
              sudo cat > /etc/httpd/conf.modules.d/00-mpm.conf << 'EOF'
              LoadModule mpm_event_module modules/mod_mpm_event.so
              EOF
      -
        name: WritePhpConfig
        action: ExecuteBash
        inputs:
          commands:
            - |
              sudo cat > /etc/httpd/conf.modules.d/15-php.conf << 'EOF'
              <IfModule !mod_php5.c>
                  <IfModule prefork.c>
                      LoadModule php7_module modules/libphp7.so
                  </IfModule>
              </IfModule>
              <IfModule !mod_php5.c>
                <IfModule !prefork.c>
                  <FilesMatch \.php$>
                    SetHandler "proxy:unix:/run/php-fpm/www.sock|fcgi://localhost"
                  </FilesMatch>
                </IfModule>
              </IfModule>
              EOF
      -
        name: WriteHtmlSample
        action: ExecuteBash
        inputs:
          commands:
            - sudo echo "<html><body><h1>Working</h1></body></html>" > /var/www/html/index.html
      -
        name: StartApache
        action: ExecuteBash
        inputs:
          commands:
            - sudo systemctl start httpd
      -
        name: CloudWatchSet
        action: ExecuteBash
        inputs:
          commands:
            - |-
              Token=$(curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
            - |-
              InstanceID=$(curl -s -H "X-aws-ec2-metadata-token: ${Token}" http://169.254.169.254/latest/meta-data/instance-id)
            - sudo aws ssm send-command --document-name "AmazonCloudWatch-ManageAgent" --targets "Key=instanceids,Values=${InstanceID}" --parameters "action=configure, mode=ec2, optionalConfigurationSource=ssm, optionalConfigurationLocation=${ResourceName}EC2ImageBuilder, optionalRestart=no" --timeout-seconds 600 --max-concurrency "50" --max-errors "0" --region ${Region}
      -
        name: CreateAdminUser
        action: ExecuteBash
        inputs:
          commands:
            - |
              # ✅ admin ユーザーの作成
              sudo useradd -m -s /bin/bash admin
              sudo usermod -aG wheel admin  # ✅ sudo グループに追加
              echo "✅ admin ユーザーを作成し、sudo グループに追加しました"
              # ✅ admin ユーザーにパスワードなしで sudo 実行を許可
              echo "admin ALL=(ALL) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/admin
              sudo chmod 440 /etc/sudoers.d/admin
              echo "✅ admin ユーザーにパスワードなしで sudo を許可しました"
              # ✅ SSH ディレクトリの作成
              sudo mkdir -p /home/admin/.ssh
              sudo chmod 700 /home/admin/.ssh
              # ✅ SSH キーペアを作成（秘密鍵: id_rsa, 公開鍵: id_rsa.pub）
              sudo ssh-keygen -t rsa -b 4096 -C "admin@${ResourceName}" -f /home/admin/.ssh/id_rsa -N ""
              echo "✅ SSH キーペアを作成しました"
              # ✅ 公開鍵を `authorized_keys` に追加（秘密鍵は保存せず）
              sudo cat /home/admin/.ssh/id_rsa.pub | sudo tee /home/admin/.ssh/authorized_keys
              sudo chmod 600 /home/admin/.ssh/authorized_keys
              sudo chown -R admin:admin /home/admin/.ssh
              echo "✅ admin ユーザーの authorized_keys に公開鍵を追加しました"
              # ✅ ImageBuilder のバージョン情報を取得
              RESOURCE_NAME_LOWER=$(echo "${ResourceName}" | tr '[:upper:]' '[:lower:]')
              IMAGE_ARN=$(aws imagebuilder list-image-pipeline-images \
                --image-pipeline-arn arn:aws:imagebuilder:${Region}:${Account}:image-pipeline/${RESOURCE_NAME_LOWER} \
                --region ${Region} \
                --query "sort_by(imageSummaryList, &dateCreated)[-1].Arn" \
                --output text)
              IMAGE_VERSION=$(echo "$IMAGE_ARN" | awk -F'/' '{print $(NF-1) "/" $NF}')
              # ✅ `1.0.0/3` を `1-0-0-3` に変換
              SECRET_VERSION=$(echo "$IMAGE_VERSION" | sed 's/\./-/g' | sed 's/\//-/g')
              # ✅ Secret Manager に秘密鍵を保存（EC2 内には残さない）
              SECRET_NAME="${ResourceName}AdminUserCredential-${SECRET_VERSION}"
              SECRET_VALUE=$(sudo cat /home/admin/.ssh/id_rsa | base64 -w 0)
              # ✅ Secret Manager に保存
              aws secretsmanager create-secret --name "$SECRET_NAME" \
                --description "SSH private key for admin user - Created for ImageBuilder Version ${IMAGE_VERSION}" \
                --secret-string "$SECRET_VALUE" \
                --region ${Region}
              echo "✅ Secret Manager に admin ユーザーの秘密鍵を ${SECRET_NAME} として保存しました"
              # ✅ EC2 内から秘密鍵を完全削除
              sudo shred -u /home/admin/.ssh/id_rsa  # ✅ 復元不可能なように削除
              echo "✅ EC2 内から秘密鍵を削除しました"
